Date,Unmitigated advisory,Reason,,,,Can padding leak a capability?,
,,Padding initialization,Stack use-after-free,direct VM subsystem access,Other,Y/N,Why
2022-04-06,FreeBSD-SA-22:08.zlib,,,,Overflow within the same allocation. Can not be protected by subobject bounds because this is handled manually via pointer arithmetic.,,
2021-01-29,FreeBSD-SA-21:01.fsdisclosure,X,,,,N,3 Bytes
2020-03-19,FreeBSD-SA-20:04.tcp,X,,,,N,"1 Byte, kstack"
2020-01-28,FreeBSD-SA-20:03.thrmisc,X,,,,N,"24 Bytes total, 20 of them user-controllabel string buffer, 4 padding that was already being zeroed. Given structure layout a capability can not be leaked due to alignment."
2019-07-24,FreeBSD-SA-19:14.freebsd32,X,,,,N,"Kstack via pci_match_conf32 uninitialized 17 Bytes array. Presumably at least one byte will need to be used for the string NULL-terminator, ruining capability alignment."
2019-07-02,FreeBSD-SA-19:10.ufs,X,,,,N,"3 Bytes, kstack"
2019-05-14,FreeBSD-SA-19:05.pf,,,,packet corruption within the same mbuf. Note that overflows are mitigated though,,
2017-11-15,FreeBSD-SA-17:10.kldstat,X,,,,Y,Leak via kld32_file_stat.pl_pathname array that holds up to MAXPATHLEN = 1024 Bytes.
2017-11-15,FreeBSD-SA-17:08.ptrace,X,,,,N,"Leak via ptrace_lwpinfo32 discloses MAXCOMLEN+1 = 20 bytes of kernel stack. Can not fit a capability because at least one NULL byte needed for the string presumably, a capability can not fit due to alignment."
2016-05-31,FreeBSD-SA-16:21.43bsd,X,,,,N,"BSD compat ostat < 16 contiguous padding bytes, kstack"
2016-05-31,FreeBSD-SA-16:20.linux,X,,,,N,"Multiple structures: linux_serial_struct discloses separately 2 and 4 bytes, l_sysinfo discloses 2 bytes kstack"
2014-11-04,FreeBSD-SA-14:25.setlogin,X,,,,Y,Discloses MAXLOGNAME = 33 bytes of kstack. Presumably at least 2 would be used for a character and a NULL terminator. Assuming stack alignment this would leave a possible leak of 1 capability from the stack.
2014-07-08,FreeBSD-SA-14:17.kmem CVE-2014-3953,X,,,,Y,"For SCTP, the process may be able to retrieve 2 bytes of kernel memory for all three control messages, plus 92 bytes for SCTP_SNDRCV and 76 bytes for SCTP_EXTRCV.  If the local process is permitted to receive SCTP notification, a maximum of 112 bytes of kernel (mbuf) memory may be returned to userland. It is unclear to me how many pointers may be present in uninitialized mbuf memory"
2014-07-08,FreeBSD-SA-14:17.kmem CVE-2014-3952,X,,,,N,4 Bytes from uninitialized mbuf memory
2014-04-30,FreeBSD-SA-14:08.tcp,,X,,,,
2013-09-10,FreeBSD-SA-13:11.sendfile,,,X,,,
2013-08-22,FreeBSD-SA-13:10.sctp,X,,,,N,4 Bytes
2013-06-18,FreeBSD-SA-13:06.mmap,,,X,,,
2010-07-13,FreeBSD-SA-10:07.mbuf,,,,mbuf M_READONLY ignored. May be fixable with ptr permission?,,
2009-06-10,FreeBSD-SA-09:09.pipe,,,X,,,
2006-01-25,FreeBSD-SA-06:06.kmem CVE-2006-0379,X,,,,N,"bridge_ioctl args string buffers in kstack: at most IFNAMSIZ = 16 Bytes, assuming at least one NULL terminator it should not be possible to leak a capability. "
2005-05-06,FreeBSD-SA-05:08.kmem,X,,,,Y,"Multiple fixed-length buffers affected from the following. u_device: multiple strings < 128 bytes of kstack. u_rman, u_resource: RM_TEXTLEN = 32 bytes of kstack. xvfsconf: MFSNAMELEN = 16 bytes kstack. ovfsconf: 32 bytes of kstack. ifmibdata: IFNAMSIZ = 16 bytes kstack. xinpcb, xtcpcb: ? padding kstack."
2005-04-15,FreeBSD-SA-05:04.ifconf,X,,,,N,"Disclose IFNAMSIZ bytes of kstack. Presumably the string must be NULL terminated and at least one character present, can not fit a capability."
2002-08-05,FreeBSD-SA-02:35.ffs,,,,"Not completely clear, possibly a vm_pindex_t overflow",,
2000-08-28,FreeBSD-SA-00:41.elf,,,X,,,