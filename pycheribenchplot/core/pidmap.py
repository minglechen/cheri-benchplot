import json
import io
import typing
from pathlib import Path

import pandas as pd
import numpy as np

from .dataset import DatasetID, DataField, StrField, Field
from .json import JSONDataSetContainer


class PidMapDataset(JSONDataSetContainer):
    """
    JSON output generated by the --libxo option of the ps command
    Currently we only support a subset of the output values
    """
    dataset_id = DatasetID.PIDMAP
    fields = [
        Field("pid", dtype=int),
        Field("uid", dtype=int),
        StrField("command"),
        Field("flags", dtype=int, importfn=lambda x: int(x, 16))
    ]

    def __init__(self, benchmark, dset_key, config):
        super().__init__(benchmark, dset_key, config)
        # Add a synthetic entry for unknown/unmatched PID number -1
        self.df.append({"pid": -1, "uid": -1, "command": "unknown"}, ignore_index=True)

    def raw_fields(self, include_derived=False):
        return PidMapDataset.fields

    def load(self, path: Path):
        with open(path, "r") as fd:
            raw_data = json.load(fd)
        records = raw_data["process-information"]["process"]
        df = pd.DataFrame.from_records(records)
        df["flags"].fillna("0", inplace=True)
        df["__dataset_id"] = self.benchmark.uuid
        self._internalize_json(df)

    def resolve_user_binaries(self, dataset_id) -> pd.DataFrame:
        df = self.df.xs(dataset_id)
        P_KPROC_MASK = 0x4
        user_commands = (df["flags"] & P_KPROC_MASK) == 0

        def resolve_path(cmd):
            target_path = Path(cmd)
            if target_path.is_absolute():
                return self.benchmark.rootfs / target_path.relative_to("/")
            else:
                # attempt to locate file in /bin /usr/bin /usr/sbin
                dollarpath = [Path("bin"), Path("usr/bin"), Path("usr/sbin")]
                for path in dollarpath:
                    candidate = self.benchmark.rootfs / path / target_path
                    if candidate.exists():
                        return candidate
            return None

        result_df = df.copy()
        result_df["command"] = df["command"].map(resolve_path)
        return result_df[~result_df["command"].isna()]

    def output_file(self):
        return super().output_file().with_suffix(".json")

    async def run_post_benchmark(self):
        """
        Post-benchmark hook to extract PID mappings.
        Note: we also use the command history from the benchmark runner to resolve any
        extra processes we have been running and that have since terminated.
        """
        self.logger.info("Extract system PIDs")
        pid_raw_data = io.StringIO()
        await self.benchmark.run_cmd("ps", ["-a", "-x", "-c", "-o", "uid,pid,command,flags", "--libxo", "json"],
                                     outfile=pid_raw_data)
        # Append the PIDs for all processes executed by the benchmark to the pid map
        pid_json = json.loads(pid_raw_data.getvalue())
        proc_list = pid_json["process-information"]["process"]
        for history_entry in self.benchmark.command_history.values():
            proc_list.append({"uid": 1, "pid": history_entry.pid, "command": str(history_entry.cmd)})
        with open(self.output_file(), "w+") as pid_fd:
            json.dump(pid_json, pid_fd)
